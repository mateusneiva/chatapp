// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

enum UserActivity {
  ONLINE
  AFK
  DND
  INVISIBLE
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?

  activity UserActivity @default(ONLINE)

  accounts Account[]

  conversationIds String[]       @db.ObjectId
  conversations   Conversation[] @relation(fields: [conversationIds], references: [id])

  messages Message[]

  createdAt DateTime @default(now())
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Message {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  conversationId String       @db.ObjectId
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  body    String
  fileUrl String?

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model Conversation {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  name    String?
  isGroup Boolean?

  userIds String[] @db.ObjectId
  users   User[]   @relation(fields: [userIds], references: [id])

  messagesIds String[]  @db.ObjectId
  messages    Message[]

  lastMessageAt DateTime @default(now())
  createdAt     DateTime @default(now())
}
